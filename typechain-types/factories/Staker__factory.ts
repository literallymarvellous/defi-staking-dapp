/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Staker, StakerInterface } from "../Staker";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "exampleExternalContractAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Stake",
    type: "event",
  },
  {
    inputs: [],
    name: "THRESHOLD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deadline",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "exampleExternalContract",
    outputs: [
      {
        internalType: "contract ExampleExternalContract",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "timeLeft",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080604052601e42620000139190620000c9565b6002553480156200002357600080fd5b50604051620012b2380380620012b2833981810160405281019062000049919062000190565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001c2565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620000d68262000090565b9150620000e38362000090565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200011b576200011a6200009a565b5b828201905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000158826200012b565b9050919050565b6200016a816200014b565b81146200017657600080fd5b50565b6000815190506200018a816200015f565b92915050565b600060208284031215620001a957620001a862000126565b5b6000620001b98482850162000179565b91505092915050565b6110e080620001d26000396000f3fe60806040526004361061007f5760003560e01c80633ccfd60b1161004e5780633ccfd60b146101305780636146195414610147578063785ffb371461015e5780639f75f227146101895761008e565b80631300a6d11461009357806327e235e3146100be57806329dcb0cf146100fb5780633a4b66f1146101265761008e565b3661008e5761008c6101b4565b005b600080fd5b34801561009f57600080fd5b506100a86103d1565b6040516100b59190610a70565b60405180910390f35b3480156100ca57600080fd5b506100e560048036038101906100e09190610aee565b6103f9565b6040516100f29190610a70565b60405180910390f35b34801561010757600080fd5b50610110610411565b60405161011d9190610a70565b60405180910390f35b61012e6101b4565b005b34801561013c57600080fd5b50610145610417565b005b34801561015357600080fd5b5061015c61070b565b005b34801561016a57600080fd5b50610173610a27565b6040516101809190610a70565b60405180910390f35b34801561019557600080fd5b5061019e610a33565b6040516101ab9190610b7a565b60405180910390f35b6000806101bf6103d1565b9050811561020f576000811461020a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020190610bf2565b60405180910390fd5b610253565b60008111610252576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024990610c5e565b60405180910390fd5b5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639d9a7fe96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e59190610cb6565b90508015610328576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031f90610d55565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103779190610da4565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a346040516103c49190610a70565b60405180910390a2505050565b600060025442106103e557600090506103f6565b426002546103f39190610dfa565b90505b90565b60016020528060005260406000206000915090505481565b60025481565b600160006104236103d1565b90508115610473576000811461046e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046590610bf2565b60405180910390fd5b6104b7565b600081116104b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ad90610c5e565b60405180910390fd5b5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639d9a7fe96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610525573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105499190610cb6565b9050801561058c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058390610d55565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90610e7a565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161067e90610ecb565b60006040518083038185875af1925050503d80600081146106bb576040519150601f19603f3d011682016040523d82523d6000602084013e6106c0565b606091505b5050905080610704576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fb90610f2c565b60405180910390fd5b5050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639d9a7fe96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610779573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079d9190610cb6565b905080156107e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d790610d55565b60405180910390fd5b6000806107eb6103d1565b9050811561083b5760008114610836576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082d90610bf2565b60405180910390fd5b61087f565b6000811161087e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087590610c5e565b60405180910390fd5b5b6000479050670de0b6b3a76400008110156108cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c690610f98565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16826040516024016040516020818303038152906040527f522e1177000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161099a9190611027565b60006040518083038185875af1925050503d80600081146109d7576040519150601f19603f3d011682016040523d82523d6000602084013e6109dc565b606091505b5050905080610a20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a179061108a565b60405180910390fd5b5050505050565b670de0b6b3a764000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000819050919050565b610a6a81610a57565b82525050565b6000602082019050610a856000830184610a61565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610abb82610a90565b9050919050565b610acb81610ab0565b8114610ad657600080fd5b50565b600081359050610ae881610ac2565b92915050565b600060208284031215610b0457610b03610a8b565b5b6000610b1284828501610ad9565b91505092915050565b6000819050919050565b6000610b40610b3b610b3684610a90565b610b1b565b610a90565b9050919050565b6000610b5282610b25565b9050919050565b6000610b6482610b47565b9050919050565b610b7481610b59565b82525050565b6000602082019050610b8f6000830184610b6b565b92915050565b600082825260208201905092915050565b7f446561646c696e65206973206e6f742072656163686564207965740000000000600082015250565b6000610bdc601b83610b95565b9150610be782610ba6565b602082019050919050565b60006020820190508181036000830152610c0b81610bcf565b9050919050565b7f446561646c696e6520697320616c726561647920726561636865640000000000600082015250565b6000610c48601b83610b95565b9150610c5382610c12565b602082019050919050565b60006020820190508181036000830152610c7781610c3b565b9050919050565b60008115159050919050565b610c9381610c7e565b8114610c9e57600080fd5b50565b600081519050610cb081610c8a565b92915050565b600060208284031215610ccc57610ccb610a8b565b5b6000610cda84828501610ca1565b91505092915050565b7f7374616b696e672070726f6365737320616c726561647920636f6d706c65746560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b6000610d3f602183610b95565b9150610d4a82610ce3565b604082019050919050565b60006020820190508181036000830152610d6e81610d32565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610daf82610a57565b9150610dba83610a57565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610def57610dee610d75565b5b828201905092915050565b6000610e0582610a57565b9150610e1083610a57565b925082821015610e2357610e22610d75565b5b828203905092915050565b7f4e6f2062616c616e636520746f20776974686472617700000000000000000000600082015250565b6000610e64601683610b95565b9150610e6f82610e2e565b602082019050919050565b60006020820190508181036000830152610e9381610e57565b9050919050565b600081905092915050565b50565b6000610eb5600083610e9a565b9150610ec082610ea5565b600082019050919050565b6000610ed682610ea8565b9150819050919050565b7f4661696c656420746f2077697468647261770000000000000000000000000000600082015250565b6000610f16601283610b95565b9150610f2182610ee0565b602082019050919050565b60006020820190508181036000830152610f4581610f09565b9050919050565b7f42656c6f77205468726573686f6c640000000000000000000000000000000000600082015250565b6000610f82600f83610b95565b9150610f8d82610f4c565b602082019050919050565b60006020820190508181036000830152610fb181610f75565b9050919050565b600081519050919050565b60005b83811015610fe1578082015181840152602081019050610fc6565b83811115610ff0576000848401525b50505050565b600061100182610fb8565b61100b8185610e9a565b935061101b818560208601610fc3565b80840191505092915050565b60006110338284610ff6565b915081905092915050565b7f657865637574652063616c6c206661696c656400000000000000000000000000600082015250565b6000611074601383610b95565b915061107f8261103e565b602082019050919050565b600060208201905081810360008301526110a381611067565b905091905056fea2646970667358221220f8bbbb36dca91afd7505ffc117a76e6dfffa17ffa2feb65ac2dd81d30991f79664736f6c634300080c0033";

type StakerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Staker__factory extends ContractFactory {
  constructor(...args: StakerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Staker";
  }

  deploy(
    exampleExternalContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Staker> {
    return super.deploy(
      exampleExternalContractAddress,
      overrides || {}
    ) as Promise<Staker>;
  }
  getDeployTransaction(
    exampleExternalContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      exampleExternalContractAddress,
      overrides || {}
    );
  }
  attach(address: string): Staker {
    return super.attach(address) as Staker;
  }
  connect(signer: Signer): Staker__factory {
    return super.connect(signer) as Staker__factory;
  }
  static readonly contractName: "Staker";
  public readonly contractName: "Staker";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakerInterface {
    return new utils.Interface(_abi) as StakerInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Staker {
    return new Contract(address, _abi, signerOrProvider) as Staker;
  }
}
